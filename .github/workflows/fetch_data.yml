# Name of the automated workflow
name: Fetch Ocean Data

# Controls when the action runs
on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'

# Defines the jobs that will run
jobs:
  # First job: Fetch data from Global Fishing Watch
  fetch-gfw-data:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install requests

      - name: Create GFW Python script
        run: |
          cat > gfw_script.py <<EOF
          import requests
          import os
          import json
          import csv
          from io import StringIO
          from datetime import datetime, timedelta

          print("--- Starting GFW Data Fetch using V3 4Wings Report API ---")
          api_key = os.getenv('GFW_API_KEY')
          
          end_date = datetime.utcnow().date() - timedelta(days=3)
          start_date = end_date - timedelta(days=3)
          date_range = f"{start_date.strftime('%Y-%m-%d')},{end_date.strftime('%Y-%m-%d')}"
          
          print(f"Fetching data for date range: {date_range}")
          
          url = "https://gateway.api.globalfishingwatch.org/v3/4wings/report"
          
          headers = { 'Authorization': f"Bearer {api_key}" }
          params = {
              'datasets[0]': 'public-global-fishing-effort:latest',
              # CORRECTED LINE: Using 'LOW' as requested by the API error message
              'spatial-resolution': 'LOW',
              'temporal-resolution': 'daily',
              'date-range': date_range,
              'format': 'csv'
          }
          
          print(f"Requesting URL: {url} with params: {params}")

          try:
              response = requests.get(url, headers=headers, params=params)
              response.raise_for_status() 
              
              print("Request successful. Converting CSV to GeoJSON...")
              
              features = []
              csv_file = StringIO(response.text)
              reader = csv.DictReader(csv_file)
              for row in reader:
                  try:
                      lat = float(row['cell_ll_lat'])
                      lon = float(row['cell_ll_lon'])
                      hours = float(row['fishing_hours'])
                      
                      features.append({
                          "type": "Feature",
                          "geometry": { "type": "Point", "coordinates": [lon, lat] },
                          "properties": { "fishing_hours": hours }
                      })
                  except (ValueError, KeyError) as e:
                      print(f"Skipping row with error: {row} - {e}")
                      continue

              geojson_output = { "type": "FeatureCollection", "features": features }

              with open("fishing_effort.geojson", "w") as f:
                  json.dump(geojson_output, f)

              print(f"Successfully saved {len(features)} data points to fishing_effort.geojson")

          except requests.exceptions.HTTPError as e:
              print(f"!!! ERROR: Request Failed. Status Code: {e.response.status_code}")
              print(f"--- Server Response Body ---\n{e.response.text}\n--------------------------")
              raise e

          print("--- GFW Data Fetch Complete ---")
          EOF

      - name: Run GFW script
        env:
          GFW_API_KEY: ${{ secrets.GFW_API_KEY }}
        run: python gfw_script.py
        
      - name: Commit and push if it changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Automated update of GFW fishing effort"
          file_pattern: "fishing_effort.geojson"

  # Second job: Fetch data from the ArcGIS Marine Species layer
  fetch-biodiversity-data:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install requests
      - name: Create Biodiversity Python script
        run: |
          cat > biodiversity_script.py <<EOF
          import requests
          url = "https://services9.arcgis.com/IkktFdUAcY3WrH25/arcgis/rest/services/Global_Marine_Species_Patterns_(55km)/FeatureServer/0/query?where=1%3D1&outFields=Rich_all&outSR=4326&f=geojson"
          response = requests.get(url)
          response.raise_for_status()
          with open("biodiversity_richness.geojson", "w") as f:
              f.write(response.text)
          print("Successfully fetched biodiversity data and saved to biodiversity_richness.geojson")
          EOF
      - name: Run Biodiversity script
        run: python biodiversity_script.py
      - name: Commit and push if it changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Automated update of marine biodiversity data"
          file_pattern: "biodiversity_richness.geojson"
